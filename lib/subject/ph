// lib/subject/physical_test_page.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class PhysicalTestPage extends StatefulWidget {
  const PhysicalTestPage({super.key});

  @override
  State<PhysicalTestPage> createState() => _PhysicalTestPageState();
}

class _PhysicalTestPageState extends State<PhysicalTestPage> {
  List<QueryDocumentSnapshot<Map<String, dynamic>>> _questions = [];
  final Map<String, String> _selected = {}; // docId -> 'A'/'B'/'C'/'D'
  bool _loading = true;
  bool _submitted = false;

  // Если в документах нет поля subject, будем фильтровать по разделам:
  static const Set<String> _physicalSections = {
    'Атмосфера',
    'Гидросфера',
    'Литосфера',
    'Биосфера',
  };

  @override
  void initState() {
    super.initState();
    _loadQuestions();
  }

  int _asInt(dynamic v) {
    if (v is int) return v;
    if (v is num) return v.toInt();
    if (v is String) {
      final s = v.replaceAll(RegExp(r'[^0-9]'), '');
      return int.tryParse(s) ?? 0;
    }
    return 0;
  }

  Future<void> _loadQuestions() async {
    setState(() {
      _loading = true;
      _submitted = false;
      _selected.clear();
    });

    // Берём все (чтобы не требовать индексов), фильтруем на клиенте.
    final snap = await FirebaseFirestore.instance.collection('questions').get();

    // Фильтр «ТОЛЬКО физическая»: либо subject == 'physical',
    // либо section ∈ {_physicalSections}. НИКАКОГО фолбэка «взять всё».
    final docs = snap.docs.where((d) {
      final data = d.data();
      final subj = (data['subject'] ?? '').toString().toLowerCase().trim();
      final sec = (data['section'] ?? '').toString().trim();
      final isPhysicalBySubject = subj == 'physical';
      final isPhysicalBySection = _physicalSections.contains(sec);
      return isPhysicalBySubject || isPhysicalBySection;
    }).toList();

    // Если после фильтрации нет вопросов — покажем пустой экран с сообщением
    if (docs.isEmpty) {
      setState(() {
        _questions = const [];
        _loading = false;
      });
      return;
    }

    docs.shuffle();
    final picked = docs.take(30).toList()
      ..sort((a, b) =>
          _asInt(a.data()['number']).compareTo(_asInt(b.data()['number'])));

    setState(() {
      _questions = picked;
      _loading = false;
    });
  }

  void _finishTest() {
    setState(() => _submitted = true);

    int correct = 0;
    for (final doc in _questions) {
      final data = doc.data();
      final right = (data['correct'] ?? '').toString().toUpperCase();
      final picked = (_selected[doc.id] ?? '').toUpperCase();
      if (right.isNotEmpty && picked == right) correct++;
    }

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Тест завершён'),
        content: Text('Результат: $correct из ${_questions.length}'),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('Ок')),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              await _loadQuestions(); // новая случайная, но отсортированная выборка
            },
            child: const Text('Ещё раз'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    if (_questions.isEmpty) {
      return Scaffold(
        appBar: AppBar(title: const Text('Физическая география — тест')),
        body: const Center(
          child: Text('В базе нет вопросов по физической географии.'),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Физическая география — тест')),
      body: ListView.builder(
        itemCount: _questions.length,
        itemBuilder: (context, index) {
          final doc = _questions[index];
          final q = doc.data();
          final id = doc.id;

          final options = (q['options'] as Map<String, dynamic>? ?? {});
          final keys = ['A', 'B', 'C', 'D'].where(options.containsKey).toList();
          final selected = _selected[id];
          final correctKey = (q['correct'] ?? '').toString().toUpperCase();

          return Card(
            margin: const EdgeInsets.all(12),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '${index + 1}. ${q['question'] ?? ''}', // локальная нумерация 1..N
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: 12),
                  for (final k in keys)
                    RadioListTile<String>(
                      title: Text('$k. ${options[k]}'),
                      value: k,
                      groupValue: selected,
                      onChanged: _submitted ? null : (val) => setState(() => _selected[id] = val!),
                      selected: _submitted && selected == k,
                      activeColor: (_submitted && k == correctKey) ? Colors.green : null,
                      subtitle: !_submitted
                          ? null
                          : (k == correctKey)
                              ? const Text('Верный ответ', style: TextStyle(color: Colors.green))
                              : (selected == k)
                                  ? const Text('Неверно', style: TextStyle(color: Colors.red))
                                  : null,
                    ),
                ],
              ),
            ),
          );
        },
      ),
      bottomNavigationBar: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: ElevatedButton(
            onPressed: _submitted ? null : _finishTest,
            child: const Text('Завершить тест'),
          ),
        ),
      ),
    );
  }
}
